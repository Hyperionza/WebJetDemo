name: Deploy to Production

on:
  push:
    branches: [ production ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
        - production

jobs:
  deploy-production:
    name: Deploy to Production Environment
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: ./movie-price-frontend/package-lock.json
    
    - name: Build Backend
      run: |
        dotnet restore
        dotnet build --configuration Release
        dotnet publish --configuration Release --output ./publish
      working-directory: ./movie-price-api
    
    - name: Build Frontend
      run: |
        npm ci
        npm run build
      working-directory: ./movie-price-frontend
      env:
        REACT_APP_API_URL: ${{ vars.PRODUCTION_API_URL }}
        CI: false
    
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Create Deployment Slot
      run: |
        az webapp deployment slot create \
          --name ${{ vars.PRODUCTION_BACKEND_APP_NAME }} \
          --resource-group ${{ vars.AZURE_RESOURCE_GROUP }} \
          --slot staging-slot \
          --configuration-source ${{ vars.PRODUCTION_BACKEND_APP_NAME }}
    
    - name: Deploy Backend to Staging Slot
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ vars.PRODUCTION_BACKEND_APP_NAME }}
        slot-name: staging-slot
        package: ./movie-price-api/publish
    
    - name: Deploy Frontend to Production
      uses: Azure/static-web-apps-deploy@v1
      with:
        azure_static_web_apps_api_token: ${{ secrets.PRODUCTION_SWA_TOKEN }}
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        action: "upload"
        app_location: "./movie-price-frontend"
        output_location: "build"
        skip_app_build: true
    
    - name: Run Production Health Checks
      run: |
        echo "Running health checks against staging slot..."
        STAGING_URL="https://${{ vars.PRODUCTION_BACKEND_APP_NAME }}-staging-slot.azurewebsites.net"
        
        # Wait for deployment to be ready
        sleep 30
        
        # Health check
        curl -f $STAGING_URL/health || exit 1
        
        # API functionality test
        curl -f $STAGING_URL/api/movies || exit 1
        
        echo "Health checks passed!"
    
    - name: Swap Deployment Slots
      run: |
        az webapp deployment slot swap \
          --name ${{ vars.PRODUCTION_BACKEND_APP_NAME }} \
          --resource-group ${{ vars.AZURE_RESOURCE_GROUP }} \
          --slot staging-slot \
          --target-slot production
    
    - name: Final Production Health Check
      run: |
        echo "Running final health check against production..."
        sleep 30
        curl -f ${{ vars.PRODUCTION_API_URL }}/health || exit 1
        curl -f ${{ vars.PRODUCTION_FRONTEND_URL }} || exit 1
        echo "Production deployment successful!"
    
    - name: Clean up Staging Slot
      if: success()
      run: |
        az webapp deployment slot delete \
          --name ${{ vars.PRODUCTION_BACKEND_APP_NAME }} \
          --resource-group ${{ vars.AZURE_RESOURCE_GROUP }} \
          --slot staging-slot
    
    - name: Rollback on Failure
      if: failure()
      run: |
        echo "Deployment failed, cleaning up staging slot..."
        az webapp deployment slot delete \
          --name ${{ vars.PRODUCTION_BACKEND_APP_NAME }} \
          --resource-group ${{ vars.AZURE_RESOURCE_GROUP }} \
          --slot staging-slot || true
    
    - name: Notify Teams
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        text: |
          ðŸš€ Production deployment ${{ job.status }}!
          Environment: production
          Commit: ${{ github.sha }}
          Author: ${{ github.actor }}
          Frontend: ${{ vars.PRODUCTION_FRONTEND_URL }}
          Backend: ${{ vars.PRODUCTION_API_URL }}
